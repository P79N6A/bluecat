<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.stylefeng.guns.sharecore.common.persistence.dao.CustAccountBySelfMapper" >
  <resultMap id="BaseResultMap" type="com.stylefeng.guns.sharecore.common.persistence.model.CustAccountModel" >
    <id column="account_id" property="accountId" jdbcType="BIGINT" />
    <result column="cust_no" property="custNo" jdbcType="BIGINT" />
    <result column="balance" property="balance" jdbcType="DECIMAL" />
    <result column="frozen_balance" property="frozenBalance" jdbcType="DECIMAL" />
    <result column="available_balance" property="availableBalance" jdbcType="DECIMAL" />
   
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="amt_source" property="amtSource" jdbcType="TINYINT" />
    <result column="account_type" property="accountType" jdbcType="TINYINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="data_digest" property="dataDigest" jdbcType="VARCHAR" />
    
    <result column="merchant_id" property="merchantId" jdbcType="BIGINT" />
    <result column="total_round_num" property="totalRoundNum" jdbcType="INTEGER" />
    <result column="current_round_num" property="currentRoundNum" jdbcType="INTEGER" />
    
  </resultMap>
  <sql id="Base_Column_List" >
    account_id, cust_no, balance, frozen_balance, available_balance, status,
    amt_source, account_type,create_time,update_time, data_digest
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from cust_account
    where account_id = #{accountId,jdbcType=BIGINT}
  </select>
  
    <select id="selectAll" resultMap="BaseResultMap"  >
    select 
	    <include refid="Base_Column_List" />
	    from cust_account   
  	</select>
  	
  	<resultMap type="com.stylefeng.guns.sharecore.common.persistence.model.CustAccountBO" id="queryAvailableAmtCustNoByCustTypeAndMerIdResultMap">
  		<result column="availableBalance" jdbcType="DECIMAL" property="availableBalance"/>
  		<result column="custNo" jdbcType="BIGINT" property="custNo"/>
  	</resultMap>
  	
  	<select id="queryAvailableAmtCustNoByCustTypeAndMerId" resultMap="queryAvailableAmtCustNoByCustTypeAndMerIdResultMap">
  		SELECT 
		  sum(ca.available_balance) availableBalance ,ca.cust_no custNo
		FROM
		  cust_account ca 
		WHERE ca.cust_no IN 
		  (SELECT 
		    ci.cust_no 
		  FROM
		    cust_info ci 
		    left join cust_merchant_ref_info cmri on ci.cust_no = cmri.cust_no
		  WHERE ci.cust_type = #{custType,jdbcType=INTEGER} 
		    AND cmri.merchant_id = #{merchantId,jdbcType=BIGINT})
		  AND ca.account_type in(1,2)  
  	</select>
  
  
    <select id="selectByCustNoForUpdate" resultMap="BaseResultMap" >
   /*FORCE_MASTER*/ select 
    <include refid="Base_Column_List" /> 
    from cust_account
    where cust_no = #{custNo,jdbcType=BIGINT}
    and account_type = #{accountType,jdbcType=TINYINT} for update
  </select>
  
   <select id="selectByCustNo" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from cust_account
    where cust_no = #{custNo,jdbcType=BIGINT}
    and account_type = #{accountType,jdbcType=TINYINT}
  </select>
  
  <select id="selectAccountByCustNo" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from cust_account
    where cust_no = #{custNo,jdbcType=BIGINT} and amt_source = #{amtSource,jdbcType=TINYINT}
    and account_type = #{accountType,jdbcType=TINYINT}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from cust_account
    where account_id = #{accountId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.stylefeng.guns.sharecore.common.persistence.model.CustAccountModel" >
    insert into cust_account (account_id, cust_no, balance, 
      frozen_balance, available_balance, status, 
      create_time, update_time, data_digest,account_type,amt_source
      )
    values (#{accountId,jdbcType=BIGINT}, #{custNo,jdbcType=BIGINT}, #{balance,jdbcType=DECIMAL}, 
      #{frozenBalance,jdbcType=DECIMAL}, #{availableBalance,jdbcType=DECIMAL}, #{status,jdbcType=TINYINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{dataDigest,jdbcType=VARCHAR},
      #{accountType,jdbcType=TINYINT}, #{amtSource,jdbcType=TINYINT}      
      )
  </insert>
  <insert id="insertSelective" parameterType="com.stylefeng.guns.sharecore.common.persistence.model.CustAccountModel" >
    insert into cust_account
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="accountId != null" >
        account_id,
      </if>
      <if test="custNo != null" >
        cust_no,
      </if>
      <if test="balance != null" >
        balance,
      </if>
      <if test="frozenBalance != null" >
        frozen_balance,
      </if>
      <if test="availableBalance != null" >
        available_balance,
      </if>
      <if test="status != null" >
        status,
      </if>
       <if test="accountType != null" >
        account_type,
      </if>
       <if test="amtSource != null" >
        amt_source,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="dataDigest != null" >
        data_digest,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="accountId != null" >
        #{accountId,jdbcType=BIGINT},
      </if>
      <if test="custNo != null" >
        #{custNo,jdbcType=BIGINT},
      </if>
      <if test="balance != null" >
        #{balance,jdbcType=DECIMAL},
      </if>
      <if test="frozenBalance != null" >
        #{frozenBalance,jdbcType=DECIMAL},
      </if>
      <if test="availableBalance != null" >
        #{availableBalance,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="accountType != null" >
        #{accountType,jdbcType=TINYINT},
      </if>
      <if test="amtSource != null" >
        #{amtSource,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dataDigest != null" >
        #{dataDigest,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.stylefeng.guns.sharecore.common.persistence.model.CustAccountModel" >
    update cust_account
    <set >    
      <if test="balance != null" >
        balance = #{balance,jdbcType=DECIMAL},
      </if>
      <if test="frozenBalance != null" >
        frozen_balance = #{frozenBalance,jdbcType=DECIMAL},
      </if>
      <if test="availableBalance != null" >
        available_balance = #{availableBalance,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="accountType != null" >
        account_type = #{accountType,jdbcType=TINYINT},
      </if>
      <if test="amtSource != null" >
        amt_source = #{amtSource,jdbcType=TINYINT},
      </if>
      
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dataDigest != null" >
        data_digest = #{dataDigest,jdbcType=VARCHAR},
      </if>
    
    </set>
    where account_id = #{accountId,jdbcType=BIGINT} and cust_no = #{custNo,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.stylefeng.guns.sharecore.common.persistence.model.CustAccountModel" >
    update cust_account
    set balance = #{balance,jdbcType=DECIMAL},
      frozen_balance = #{frozenBalance,jdbcType=DECIMAL},
      available_balance = #{availableBalance,jdbcType=DECIMAL},      
        status = #{status,jdbcType=TINYINT},      
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      data_digest = #{dataDigest,jdbcType=VARCHAR}
    where account_id = #{accountId,jdbcType=BIGINT} and cust_no = #{custNo,jdbcType=BIGINT}
  </update>
  
  <!-- 批量更新资金来源以及资金类型 -->
    <update id="batchUpdateCustAccount" parameterType="Map">
        UPDATE cust_account
        SET 
	        amt_source = #{amtSource,jdbcType=TINYINT},
	        account_type = #{accountType,jdbcType=TINYINT},
	        update_time = #{updateTime,jdbcType=TIMESTAMP}
        WHERE account_id in
        (
        <foreach collection="list" item="item" separator=",">
            #{item.accountId,jdbcType=BIGINT}
        </foreach>
        )
    </update>
    
    <!-- 批量创建赏金账户和交易积分账户 -->
    <insert id="batchCreateRewardJifenAccount" parameterType="java.util.List">
        insert into cust_account (
        	account_id,
        	cust_no,
        	balance,
        	frozen_balance,
        	available_balance,
        	status,
        	create_time,
        	update_time,
        	data_digest,
        	jifen_balance,
        	amt_source,
        	account_type)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.accountId,jdbcType=BIGINT}, 
             #{item.custNo,jdbcType=BIGINT},
             #{item.balance,jdbcType=DECIMAL},
             #{item.frozenBalance,jdbcType=DECIMAL},
             #{item.availableBalance,jdbcType=DECIMAL},
             #{item.status,jdbcType=TINYINT},
             #{item.createTime,jdbcType=TIMESTAMP},
             #{item.updateTime,jdbcType=TIMESTAMP},
             #{item.dataDigest,jdbcType=VARCHAR},
             #{item.jifenBalance,jdbcType=DECIMAL},
             #{item.amtSource,jdbcType=TINYINT},
             #{item.accountType,jdbcType=TINYINT})
        </foreach>
    </insert>
    
    <!-- 迁移原资金账户中的积分到客户的交易积分账户中 -->
    <update id="moveOrigDate2JifenAccount" parameterType="java.util.List">
		  update cust_account set
		    balance=
		  <foreach collection="list" item="item" index="index" separator=" " open="case account_id" close="end">
		      when #{item.accountId,jdbcType=BIGINT} then #{item.balance,jdbcType=DECIMAL}
		  </foreach>
		  ,available_balance=
		  <foreach collection="list" item="item" index="index" separator=" " open="case account_id" close="end">
		      when #{item.accountId,jdbcType=BIGINT} then #{item.availableBalance,jdbcType=DECIMAL}
		  </foreach>
		  ,update_time=
		  <foreach collection="list" item="item" index="index" separator=" " open="case account_id" close="end">
		      when #{item.accountId,jdbcType=BIGINT} then #{item.updateTime,jdbcType=TIMESTAMP}
		  </foreach>
		  ,data_digest=
		  <foreach collection="list" item="item" index="index" separator=" " open="case account_id" close="end">
		      when #{item.accountId,jdbcType=BIGINT} then #{item.dataDigest,jdbcType=VARCHAR}
		  </foreach>
		  where account_id in
		  <foreach collection="list" index="index" item="item" separator="," open="(" close=")">
		      #{item.accountId,jdbcType=BIGINT}
		  </foreach>
	</update>

	<!-- 查询客户类型为客户的资金账户信息 -->
    <select id="selectAllCust1" resultMap="BaseResultMap"  >
        SELECT 
            ca.account_id, 
            ca.cust_no, 
            ca.balance, 
            ca.frozen_balance, 
            ca.available_balance, 
            ca.jifen_balance,
            ca.status,
    		ca.amt_source, 
    		ca.account_type,
    		ca.create_time,
    		ca.update_time, 
    		ca.data_digest
        FROM 
            cust_account ca 
            LEFT JOIN cust_info ci
            ON ca.cust_no = ci.cust_no
        WHERE ci.cust_type = #{custType,jdbcType=INTEGER} 
        AND ca.amt_source = 1
        AND ca.account_type = 1
        AND NOT EXISTS (SELECT 1 FROM cust_account caa WHERE caa.cust_no = ca.cust_no AND caa.account_type = 3)
    </select>
    
    <!-- 查询客户类型为商户的资金账户信息 -->
    <select id="selectAllCust2" resultMap="BaseResultMap"  >
        SELECT 
            ca.account_id, 
            ca.cust_no, 
            ca.balance, 
            ca.frozen_balance, 
            ca.available_balance, 
            ca.jifen_balance,
            ca.status,
    		ca.amt_source, 
    		ca.account_type,
    		ca.create_time,
    		ca.update_time, 
    		ca.data_digest
        FROM 
            cust_account ca 
            LEFT JOIN cust_info ci
            ON ca.cust_no = ci.cust_no
        WHERE ci.cust_type = #{custType,jdbcType=INTEGER} 
    </select>
    
    <select id="queryAllOfflineJiamengHasNotTsfCustAccount" resultType="java.lang.Long">
    	SELECT 
		id 
		FROM merchant_info 
		WHERE merchant_type = 10  
		AND merchant_level = 13 
		AND is_online_service = 12
		AND id NOT IN(SELECT 
				mi.id 
				FROM 
				merchant_info mi 
				LEFT JOIN 
				cust_info ci 
				ON mi.id = ci.merchant_id
				LEFT JOIN 
				cust_account ca
				ON ca.cust_no = ci.cust_no
				WHERE ci.cust_type = 2
				AND mi.merchant_type = 10 
				AND mi.merchant_level = 13 
				AND mi.is_online_service = 12
				AND ca.account_type = 2)
    </select>
    
    <select id="queryMerchantAvailableBalance" resultMap="BaseResultMap">
    	SELECT mi.id merchant_id,mi.total_round_num,mi.current_round_num,ca.account_id,ca.cust_no,SUM(ca.available_balance) available_balance
		FROM cust_account ca LEFT JOIN cust_info ci ON ci.cust_no=ca.cust_no
		LEFT JOIN cust_merchant_ref_info mri ON mri.cust_no = ci.cust_no
		LEFT JOIN merchant_info mi ON mi.id = mri.merchant_id
		WHERE mi.merchant_type=#{merchantType,jdbcType=TINYINT}
		AND mi.STATUS = #{merchantStatus,jdbcType=TINYINT}
		AND ci.cust_type = 2
		GROUP BY mi.id
    </select> 
    
    <select id="selectByCustNoAndAccountType" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from cust_account
    where cust_no = #{custNo,jdbcType=BIGINT} and account_type = #{accountType,jdbcType=TINYINT}
  </select>
    
	<select id="queryMerchantAvailableBalanceByCustNoAndMerchantId" resultMap="BaseResultMap">
    	SELECT mi.id merchant_id,mi.total_round_num,mi.current_round_num,ca.account_id,ca.cust_no,SUM(ca.available_balance) available_balance
		FROM cust_account ca
		LEFT JOIN cust_info ci ON ci.cust_no=ca.cust_no
		LEFT JOIN cust_merchant_ref_info mri ON mri.cust_no = ci.cust_no
		LEFT JOIN merchant_info mi ON mi.id = mri.merchant_id
		WHERE ca.cust_no = #{custNo,jdbcType=BIGINT} and mri.merchant_id = #{merchantId,jdbcType=BIGINT}
		AND ci.cust_type = 2
		GROUP BY mi.id
    </select> 
    
    
    <select id="selectListByCustNo" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from 
    	cust_account
    where 
    	cust_no = #{custNo,jdbcType=BIGINT} 
  </select>
</mapper>